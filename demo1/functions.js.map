{"version":3,"file":"functions.js","mappings":"yBAkHAA,gBAAgBC,UAAU,OAxG1B,SAAoBC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAuGAH,gBAAgBC,UAAU,OAhG1B,WAEE,OAAO,IAAIG,SAAQ,SAAUC,EAASC,GACpCC,MAFQ,oCAGLC,MAAK,SAAUC,GAEd,OADAC,QAAQC,IAAI,SACLF,EAASG,MAClB,IACCJ,MAAK,SAAUI,GACdF,QAAQC,IAAI,YACZN,EAAQO,EACV,IACCC,OAAM,SAASC,GACdJ,QAAQC,IAAI,UAAWG,EACzB,GACJ,GACF,IAiFAd,gBAAgBC,UAAU,QA1E1B,WAGE,OADAS,QAAQC,IAAI,GACL,IAAIP,SAAQ,SAAUC,EAASC,GACpCC,MAHQ,8CAILC,MAAK,SAAUC,GAEd,OADAC,QAAQC,IAAI,GACLF,EAASG,MAClB,IACCJ,MAAK,SAAUI,GACdF,QAAQC,IAAI,GACZN,EAAQO,EACV,IACCC,OAAM,SAASC,GACdJ,QAAQC,IAAI,EAAGG,EACjB,GACJ,GACF,IA0DAd,gBAAgBC,UAAU,SApD1B,SAAsBc,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA4CAhB,gBAAgBC,UAAU,aA5B1B,SAA0BuB,EAAqBT,GAC7C,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAmBAhB,gBAAgBC,UAAU,OAX1B,SAA2ByB,GAGzB,OAFAhB,QAAQC,IAAIe,GAELA,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Requests the names of the people currently on the International Space Station.\n * Note: This function requests data from a hypothetical URL. In practice, replace the URL with a data source for your scenario.\n * @customfunction\n */\nexport function API() {\n  let url = \"https://www.microsoft.com/zh-cn/\"; // This is a hypothetical URL.\n  return new Promise(function (resolve, reject) {\n    fetch(url)\n      .then(function (response) {\n        console.log(2222222)\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(3333333333)\n        resolve(text);\n      })\n      .catch(function(err){\n        console.log(444444444, err)\n      })\n  })\n}\n\n/**\n * Requests the names of the people currently on the International Space Station.\n * Note: This function requests data from a hypothetical URL. In practice, replace the URL with a data source for your scenario.\n * @customfunction\n */\nexport function APII() {\n  let url = \"https://localhost:3000/public/functions.js\"; // This is a hypothetical URL.\n  console.log(1)\n  return new Promise(function (resolve, reject) {\n    fetch(url)\n      .then(function (response) {\n        console.log(2)\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(3)\n        resolve(text);\n      })\n      .catch(function(err){\n        console.log(4, err)\n      })\n  })\n}\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"API\", API);\nCustomFunctions.associate(\"APII\", APII);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);"],"names":["CustomFunctions","associate","first","second","Promise","resolve","reject","fetch","then","response","console","log","text","catch","err","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message"],"sourceRoot":""}